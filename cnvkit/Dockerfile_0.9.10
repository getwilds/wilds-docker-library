
# Using Python base image
FROM python:3.10-slim

# Adding labels for the GitHub Container Registry
LABEL org.opencontainers.image.title="cnvkit" \
      org.opencontainers.image.description="Container image for the use of CNVkit in FH DaSL's WILDS" \
      org.opencontainers.image.version="0.9.10" \
      org.opencontainers.image.authors="wilds@fredhutch.org" \
      org.opencontainers.image.url="https://ocdo.fredhutch.org/" \
      org.opencontainers.image.documentation="https://getwilds.org/" \
      org.opencontainers.image.source="https://github.com/getwilds/wilds-docker-library" \
      org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Set shell options
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Install system dependencies with pinned versions
RUN apt-get update && \
    # Store current versions in variables
    BUILD_ESSENTIAL_VERSION=$(apt-cache policy build-essential | grep Candidate | awk '{print $2}') && \
    GCC_VERSION=$(apt-cache policy gcc | grep Candidate | awk '{print $2}') && \
    GPP_VERSION=$(apt-cache policy g++ | grep Candidate | awk '{print $2}') && \
    GFORTRAN_VERSION=$(apt-cache policy gfortran | grep Candidate | awk '{print $2}') && \
    LIBBLAS_VERSION=$(apt-cache policy libblas-dev | grep Candidate | awk '{print $2}') && \
    LIBLAPACK_VERSION=$(apt-cache policy liblapack-dev | grep Candidate | awk '{print $2}') && \
    LIBSSL_VERSION=$(apt-cache policy libssl-dev | grep Candidate | awk '{print $2}') && \
    LIBCURL_VERSION=$(apt-cache policy libcurl4-openssl-dev | grep Candidate | awk '{print $2}') && \
    RBASE_VERSION=$(apt-cache policy r-base | grep Candidate | awk '{print $2}') && \
    RBASEDEV_VERSION=$(apt-cache policy r-base-dev | grep Candidate | awk '{print $2}') && \
    # Install packages with specific versions
    apt-get install -y --no-install-recommends \
    build-essential="${BUILD_ESSENTIAL_VERSION}" \
    gcc="${GCC_VERSION}" \
    g++="${GPP_VERSION}" \
    gfortran="${GFORTRAN_VERSION}" \
    libblas-dev="${LIBBLAS_VERSION}" \
    liblapack-dev="${LIBLAPACK_VERSION}" \
    libssl-dev="${LIBSSL_VERSION}" \
    libcurl4-openssl-dev="${LIBCURL_VERSION}" \
    r-base="${RBASE_VERSION}" \
    r-base-dev="${RBASEDEV_VERSION}" \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /home/cnvkit

# Install CNVkit with compatible dependencies
# Use CPU-only PyTorch to reduce image size (CNVkit doesn't need GPU acceleration)
RUN pip install --no-cache-dir \
    cython==0.29.37 \
    numpy==1.24.4 && \
    pip install --no-cache-dir \
    --index-url https://download.pytorch.org/whl/cpu \
    torch==2.5.1 && \
    pip install --no-cache-dir \
    cnvkit==0.9.10

# Install R packages required by CNVkit
RUN R -e "install.packages(c('BiocManager', 'httr', 'ggplot2', 'gridExtra', 'RColorBrewer'))" && \
    R -e "BiocManager::install(c('DNAcopy', 'PSCBS', 'GenomicRanges', 'IRanges'))"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import cnvkit; print('CNVkit is working')" || exit 1

# Default command
CMD ["cnvkit.py", "--help"]
