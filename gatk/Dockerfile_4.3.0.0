
# Using the Ubuntu base image
FROM ubuntu:24.04

# Adding labels for the GitHub Container Registry
LABEL org.opencontainers.image.title="gatk"
LABEL org.opencontainers.image.description="Container image for the use of GATK in FH DaSL's WILDS"
LABEL org.opencontainers.image.version="4.3.0.0"
LABEL org.opencontainers.image.authors="wilds@fredhutch.org"
LABEL org.opencontainers.image.url=https://ocdo.fredhutch.org/
LABEL org.opencontainers.image.documentation=https://getwilds.org/
LABEL org.opencontainers.image.source=https://github.com/getwilds/wilds-docker-library
LABEL org.opencontainers.image.licenses=MIT

# Avoid interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set environment variables
ENV GATK_VERSION=4.3.0.0
ENV GATK_HOME=/opt/gatk

# Set shell options
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Install build dependencies and core packages
RUN apt-get update \
  && WGET_VERSION=$(apt-cache policy wget | grep Candidate | awk '{print $2}') \
  && UNZIP_VERSION=$(apt-cache policy unzip | grep Candidate | awk '{print $2}') \
  && GIT_VERSION=$(apt-cache policy git | grep Candidate | awk '{print $2}') \
  && PYTHON3_VERSION=$(apt-cache policy python3 | grep Candidate | awk '{print $2}') \
  && PYTHON3PIP_VERSION=$(apt-cache policy python3-pip | grep Candidate | awk '{print $2}') \
  && CURL_VERSION=$(apt-cache policy curl | grep Candidate | awk '{print $2}') \
  && OPENJDK_VERSION=$(apt-cache policy openjdk-17-jdk | grep Candidate | awk '{print $2}') \
  && TZDATA_VERSION=$(apt-cache policy tzdata | grep Candidate | awk '{print $2}') \
  && BUILD_ESSENTIAL_VERSION=$(apt-cache policy build-essential | grep Candidate | awk '{print $2}') \
  && ZLIB_VERSION=$(apt-cache policy zlib1g-dev | grep Candidate | awk '{print $2}') \
  && LIBBZ2_VERSION=$(apt-cache policy libbz2-dev | grep Candidate | awk '{print $2}') \
  && LIBLZMA_VERSION=$(apt-cache policy liblzma-dev | grep Candidate | awk '{print $2}') \
  && LIBSSL_VERSION=$(apt-cache policy libssl-dev | grep Candidate | awk '{print $2}') \
  && LIBCURL_VERSION=$(apt-cache policy libcurl4-gnutls-dev | grep Candidate | awk '{print $2}') \
  && AUTOCONF_VERSION=$(apt-cache policy autoconf | grep Candidate | awk '{print $2}') \
  && AUTOMAKE_VERSION=$(apt-cache policy automake | grep Candidate | awk '{print $2}') \
  && LIBNCURSES_VERSION=$(apt-cache policy libncurses-dev | grep Candidate | awk '{print $2}') \
  && apt-get install -y --no-install-recommends \
  wget="${WGET_VERSION}" \
  unzip="${UNZIP_VERSION}" \
  git="${GIT_VERSION}" \
  python3="${PYTHON3_VERSION}" \
  python3-pip="${PYTHON3PIP_VERSION}" \
  curl="${CURL_VERSION}" \
  openjdk-17-jdk="${OPENJDK_VERSION}" \
  tzdata="${TZDATA_VERSION}" \
  build-essential="${BUILD_ESSENTIAL_VERSION}" \
  zlib1g-dev="${ZLIB_VERSION}" \
  libbz2-dev="${LIBBZ2_VERSION}" \
  liblzma-dev="${LIBLZMA_VERSION}" \
  libssl-dev="${LIBSSL_VERSION}" \
  libcurl4-gnutls-dev="${LIBCURL_VERSION}" \
  autoconf="${AUTOCONF_VERSION}" \
  automake="${AUTOMAKE_VERSION}" \
  libncurses-dev="${LIBNCURSES_VERSION}" \
  && rm -rf /var/lib/apt/lists/* \
  && ln -sf /usr/bin/python3 /usr/bin/python

# Download and install GATK
RUN mkdir -p ${GATK_HOME} && \
    wget -q https://github.com/broadinstitute/gatk/releases/download/${GATK_VERSION}/gatk-${GATK_VERSION}.zip && \
    unzip gatk-${GATK_VERSION}.zip -d /opt && \
    rm gatk-${GATK_VERSION}.zip && \
    ln -s /opt/gatk-${GATK_VERSION}/gatk /usr/local/bin/gatk

# Build and install htslib (includes bgzip, tabix)
RUN wget -q https://github.com/samtools/htslib/releases/download/1.20/htslib-1.20.tar.bz2 && tar -jxf htslib-1.20.tar.bz2
WORKDIR /htslib-1.20
RUN ./configure && make && make install
WORKDIR /
RUN rm -rf htslib-1.20*

# Build and install samtools  
RUN wget -q https://github.com/samtools/samtools/releases/download/1.20/samtools-1.20.tar.bz2 && tar -jxf samtools-1.20.tar.bz2
WORKDIR /samtools-1.20
RUN ./configure && make && make install
WORKDIR /
RUN rm -rf samtools-1.20* && ldconfig

# Verify installation
RUN gatk --version && samtools --version && bgzip --version && tabix --version

# Create working directory
WORKDIR /data

# Command to run when container starts
CMD ["/bin/bash"]
