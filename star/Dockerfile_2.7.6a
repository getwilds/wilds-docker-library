
# Using the Ubuntu base image
FROM ubuntu:24.04

# Adding labels for the GitHub Container Registry
LABEL org.opencontainers.image.title="star"
LABEL org.opencontainers.image.description="Container image for the use of STAR in FH DaSL's WILDS"
LABEL org.opencontainers.image.version="2.7.6a"
LABEL org.opencontainers.image.authors="wilds@fredhutch.org"
LABEL org.opencontainers.image.url=https://hutchdatascience.org/
LABEL org.opencontainers.image.documentation=https://getwilds.org/
LABEL org.opencontainers.image.source=https://github.com/getwilds/wilds-docker-library
LABEL org.opencontainers.image.licenses=MIT

# Set the shell option to fail if any command in a pipe fails
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Installing prerequisites
RUN apt-get update \
  && BUILD_ESSENTIAL_VERSION=$(apt-cache policy build-essential | grep Candidate | awk '{print $2}') \
  && WGET_VERSION=$(apt-cache policy wget | grep Candidate | awk '{print $2}') \
  && ZLIB1G_DEV_VERSION=$(apt-cache policy zlib1g-dev | grep Candidate | awk '{print $2}') \
  && AUTOCONF_VERSION=$(apt-cache policy autoconf | grep Candidate | awk '{print $2}') \
  && AUTOMAKE_VERSION=$(apt-cache policy automake | grep Candidate | awk '{print $2}') \
  && LIBNCURSES_DEV_VERSION=$(apt-cache policy libncurses-dev | grep Candidate | awk '{print $2}') \
  && LIBBZ2_DEV_VERSION=$(apt-cache policy libbz2-dev | grep Candidate | awk '{print $2}') \
  && LIBLZMA_DEV_VERSION=$(apt-cache policy liblzma-dev | grep Candidate | awk '{print $2}') \
  && LIBSSL_DEV_VERSION=$(apt-cache policy libssl-dev | grep Candidate | awk '{print $2}') \
  && LIBCURL4_GNUTLS_DEV_VERSION=$(apt-cache policy libcurl4-gnutls-dev | grep Candidate | awk '{print $2}') \
  && XXD_VERSION=$(apt-cache policy xxd | grep Candidate | awk '{print $2}') \
  && apt-get install -y --no-install-recommends \
  build-essential="${BUILD_ESSENTIAL_VERSION}" \
  wget="${WGET_VERSION}" \
  zlib1g-dev="${ZLIB1G_DEV_VERSION}" \
  autoconf="${AUTOCONF_VERSION}" \
  automake="${AUTOMAKE_VERSION}" \
  libncurses-dev="${LIBNCURSES_DEV_VERSION}" \
  libbz2-dev="${LIBBZ2_DEV_VERSION}" \
  liblzma-dev="${LIBLZMA_DEV_VERSION}" \
  libssl-dev="${LIBSSL_DEV_VERSION}" \
  libcurl4-gnutls-dev="${LIBCURL4_GNUTLS_DEV_VERSION}" \
  xxd="${XXD_VERSION}" \
  && rm -rf /var/lib/apt/lists/*

# Pulling and extracting STAR source code
RUN wget -q --no-check-certificate https://github.com/alexdobin/STAR/archive/2.7.6a.tar.gz && tar -xzf 2.7.6a.tar.gz

# Installing STAR
WORKDIR /STAR-2.7.6a/source
RUN make STAR
WORKDIR /
ENV PATH="${PATH}:/STAR-2.7.6a/source"

# Pulling and extracting Samtools source code
RUN wget -q --no-check-certificate https://github.com/samtools/samtools/releases/download/1.11/samtools-1.11.tar.bz2 && tar -jxf samtools-1.11.tar.bz2

# Installing Samtools
WORKDIR /samtools-1.11
RUN ./configure && make && make install
WORKDIR /

# Cleanup
RUN rm -rf samtools-1.11 samtools-1.11.tar.bz2 

