name: Update DockerHub Repository Descriptions

on:
  push:
    branches: [ main ]
    paths:
      - '*/README.md'  # This triggers when any README.md in a subdirectory changes
      - '*/Dockerfile_latest'  # Also trigger when a latest Dockerfile changes
  workflow_dispatch:   # Keep manual triggering option

jobs:
  update-description:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Find changed README files
        id: changed-files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # For push events, find changed files using the GitHub API
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Get the list of files changed in this commit
            FILES_RESP=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}")
            
            # Extract README.md files from the changed files
            README_FILES=$(echo "$FILES_RESP" | jq -r '.files[] | select(.filename | test("README\\.md$") or test("Dockerfile_latest$")) | .filename')
          else
            # For workflow_dispatch, consider all README.md files in Docker image directories
            README_FILES=$(find . -maxdepth 2 -path "./*/README.md" -o -path "./*/Dockerfile_latest" | sed 's|^./||')
          fi
          
          if [ -z "$README_FILES" ]; then
            echo "No README or Dockerfile_latest files were changed."
            echo "readmes=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract directories from the file paths
          DIRS=$(echo "$README_FILES" | xargs -I{} dirname {} | sort | uniq)
          
          # Create a comma-separated list for GitHub Actions output
          DIRS_CSV=$(echo "$DIRS" | tr '\n' ',' | sed 's/,$//')
          
          # Set the output in the correct format for GitHub Actions
          echo "readmes=$DIRS_CSV" >> $GITHUB_OUTPUT
          echo "Found changed files in directories: $DIRS_CSV"
      
      - name: Login to DockerHub
        id: login
        run: |
          RESPONSE=$(curl -s -H "Content-Type: application/json" -X POST \
            -d "{\"username\": \"${{ secrets.DOCKERHUB_USER }}\", \"password\": \"${{ secrets.DOCKERHUB_PW }}\"}" \
            https://hub.docker.com/v2/users/login/)
          
          TOKEN=$(echo $RESPONSE | jq -r '.token')
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to get DockerHub token. Check your credentials."
            echo "Response was: $RESPONSE"
            exit 1
          fi
          
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "Successfully logged in to DockerHub"
      
      - name: Update DockerHub Repository Descriptions
        run: |
          # Process each changed directory
          READMES="${{ steps.changed-files.outputs.readmes }}"
          echo "Processing directories: $READMES"
          
          # Only proceed if we have directories to process
          if [ -z "$READMES" ]; then
            echo "No directories to process"
            exit 0
          fi
          
          # Split the comma-separated list
          IFS=',' read -ra DIRS <<< "$READMES"
          
          # Process each directory
          for DIR in "${DIRS[@]}"; do
            # Skip if it's not a directory with a valid Docker image
            if [ ! -d "$DIR" ]; then
              echo "Skipping $DIR: not a valid directory"
              continue
            fi
            
            REPO_NAME=$(basename "$DIR")
            echo "Processing repository: getwilds/$REPO_NAME"
            
            # Check for README.md
            if [ ! -f "$DIR/README.md" ]; then
              echo "Warning: $DIR/README.md not found, skipping full description update"
              FULL_DESC=""
            else
              FULL_DESC=$(cat "$DIR/README.md")
            fi
            
            # Check for Dockerfile_latest to extract short description
            if [ ! -f "$DIR/Dockerfile_latest" ]; then
              echo "Warning: $DIR/Dockerfile_latest not found, skipping short description update"
              SHORT_DESC=""
            else
              # Extract the short description from the Dockerfile_latest
              SHORT_DESC=$(grep -E 'org.opencontainers.image.description=' "$DIR/Dockerfile_latest" | cut -d'"' -f2)
              if [ -z "$SHORT_DESC" ]; then
                # Try single quotes if double quotes didn't work
                SHORT_DESC=$(grep -E 'org.opencontainers.image.description=' "$DIR/Dockerfile_latest" | cut -d"'" -f2)
              fi
            fi
            
            echo "Updating description for repository: getwilds/$REPO_NAME"
            
            # Create JSON payload based on available content
            if [ -n "$FULL_DESC" ] && [ -n "$SHORT_DESC" ]; then
              # Both full and short descriptions are available
              jq -n --arg full "$FULL_DESC" --arg short "$SHORT_DESC" '{
                full_description: $full,
                description: $short
              }' > payload.json
            elif [ -n "$FULL_DESC" ]; then
              # Only full description is available
              jq -n --arg full "$FULL_DESC" '{
                full_description: $full
              }' > payload.json
            elif [ -n "$SHORT_DESC" ]; then
              # Only short description is available
              jq -n --arg short "$SHORT_DESC" '{
                description: $short
              }' > payload.json
            else
              # No descriptions available
              echo "No descriptions found for $REPO_NAME, skipping"
              continue
            fi
            
            # Update the DockerHub repository description
            RESPONSE=$(curl -s -H "Content-Type: application/json" \
              -H "Authorization: JWT ${{ steps.login.outputs.token }}" \
              -X PATCH \
              --data @payload.json \
              "https://hub.docker.com/v2/repositories/getwilds/$REPO_NAME/")
            
            if echo "$RESPONSE" | grep -q "error"; then
              echo "Error updating $REPO_NAME: $RESPONSE"
            else
              echo "Successfully updated description for getwilds/$REPO_NAME"
            fi
          done
