name: Docker Build, Upload, and Update Descriptions

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:  # Allow manual triggering with parameters
    inputs:
      image_directory:
        description: 'Directory name containing the Dockerfile to build/push (e.g., "samtools")'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to determine changed files
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Login to DockerHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PW }}
      
      - name: Install Docker Scout
        run: |
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          sh install-scout.sh
      
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Find Files for Processing
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger - use the specified directory
            SPECIFIED_DIR="${{ github.event.inputs.image_directory }}"
            echo "Processing specified directory: $SPECIFIED_DIR"
            
            # Verify the directory exists
            if [ ! -d "$SPECIFIED_DIR" ]; then
              echo "Error: Directory '$SPECIFIED_DIR' does not exist."
              exit 1
            fi
            
            # Find all Dockerfiles in the specified directory
            DOCKER_FILES=$(find "$SPECIFIED_DIR" -maxdepth 1 -name "Dockerfile_*" | sort)
            if [ -z "$DOCKER_FILES" ]; then
              echo "No Dockerfiles found in '$SPECIFIED_DIR'."
            else
              echo "Dockerfiles to process:"
              echo "$DOCKER_FILES"
            fi
            
            # Find README.md in the specified directory
            README_FILES=""
            if [ -f "$SPECIFIED_DIR/README.md" ]; then
              README_FILES="$SPECIFIED_DIR/README.md"
              echo "README.md found in '$SPECIFIED_DIR'."
            fi
            
            # Only one directory is affected in manual mode
            AFFECTED_DIRS="$SPECIFIED_DIR"
            echo "Affected directory: $AFFECTED_DIRS"
            
          else
            # Push event - find changed files
            echo "Processing push event - detecting changed files"
            
            # For merge commits, compare with the first parent (the target branch)
            if [[ $(git cat-file -p HEAD | grep -c "^parent ") -gt 1 ]]; then
                echo "Detected merge commit, comparing with first parent"
                CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD^1..HEAD)
            else
                # For normal commits, compare with the previous commit
                CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD^..HEAD)
            fi
            
            echo "Changed files:"
            echo "$CHANGED_FILES"
            
            # Filter for Dockerfiles
            DOCKER_FILES=$(echo "$CHANGED_FILES" | grep -E "Dockerfile_" || true)
            if [ -z "$DOCKER_FILES" ]; then
              echo "No Dockerfile changes detected."
            else
              echo "Changed Dockerfiles:"
              echo "$DOCKER_FILES"
            fi
            
            # Filter for README files
            README_FILES=$(echo "$CHANGED_FILES" | grep -E "README\.md$" || true)
            if [ -z "$README_FILES" ]; then
              echo "No README changes detected."
            else
              echo "Changed READMEs:"
              echo "$README_FILES"
            fi
            
            # Create a list of affected directories
            AFFECTED_DIRS=$(echo -e "$DOCKER_FILES\n$README_FILES" | xargs -I{} dirname {} | sort | uniq)
            if [ -z "$AFFECTED_DIRS" ]; then
              echo "No affected directories."
            fi
            echo "Affected directories:"
            echo "$AFFECTED_DIRS"
          fi
          
          # Output the Docker files and affected directories
          echo "docker_files<<EOF" >> $GITHUB_OUTPUT
          echo "$DOCKER_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "affected_dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$AFFECTED_DIRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Build, Push Docker Images, and Generate Vulnerability Reports
        if: ${{ steps.changed-files.outputs.docker_files != '' }}
        run: |
          # Process each Dockerfile
          echo "${{ steps.changed-files.outputs.docker_files }}" | while read -r changed_file; do
            if [[ -n "$changed_file" && -f "$changed_file" ]]; then
              # Extract tool name and tag from path
              IFS="/" read -ra toolarr <<< "$changed_file"
              IFS="_" read -ra tagarr <<< "$changed_file"
              
              tool_name="${toolarr[0]}"
              tag="${tagarr[-1]}"
              
              echo "Building image for $tool_name:$tag"
              
              # Build and push to GitHub Container Registry
              docker build --platform linux/amd64 -t "ghcr.io/getwilds/${tool_name}:${tag}" -f "${changed_file}" --push .
              
              # Build and push to DockerHub
              docker build --platform linux/amd64 -t "getwilds/${tool_name}:${tag}" -f "${changed_file}" --push .
              
              # Update Docker Scout CVE markdown file
              CVE_FILE="${tool_name}/CVEs_${tag}.md"
              echo "# Vulnerability Report for getwilds/${tool_name}:${tag}" > $CVE_FILE
              echo "" >> $CVE_FILE
              echo "Report generated on $(TZ='America/Los_Angeles' date)" >> $CVE_FILE
              echo "" >> $CVE_FILE
              
              if docker scout cves ghcr.io/getwilds/${tool_name}:${tag} --format markdown >> $CVE_FILE; then
                echo "Successfully generated vulnerability report for getwilds/${tool_name}:${tag}"
              else
                echo "Error generating vulnerabilities report for getwilds/${tool_name}:${tag}"
                echo "Error generating vulnerabilities report. Please try again later." >> $CVE_FILE
              fi
              
              # Replace ghcr.io/getwilds with getwilds in the report
              sed -i 's|ghcr.io/getwilds/|getwilds/|g' $CVE_FILE

              # Add CVE file to git staging
              git add $CVE_FILE
              
              # Clean up to save space
              docker system prune -af
            fi
          done
          
          # Check if there are any staged changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit and push CVE reports
            git commit -m "Update vulnerability reports [skip ci]"
            git push origin ${{ github.ref_name }}
            echo "Committed and pushed vulnerability reports"
          fi
      
      - name: Update DockerHub Repository Descriptions
        if: ${{ steps.changed-files.outputs.affected_dirs != '' }}
        run: |
          # Get DockerHub token
          RESPONSE=$(curl -s -H "Content-Type: application/json" -X POST \
            -d "{\"username\": \"${{ secrets.DOCKERHUB_USER }}\", \"password\": \"${{ secrets.DOCKERHUB_PW }}\"}" \
            https://hub.docker.com/v2/users/login/)
          
          TOKEN=$(echo $RESPONSE | jq -r '.token')
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to get DockerHub token. Check your credentials."
            echo "Response was: $RESPONSE"
            exit 1
          fi
          
          echo "Successfully logged in to DockerHub"
          
          # Process each affected directory
          echo "${{ steps.changed-files.outputs.affected_dirs }}" | while read -r dir; do
            # Skip if it's not a directory with a valid Docker image
            if [ ! -d "$dir" ]; then
              echo "Skipping $dir: not a valid directory"
              continue
            fi
            
            REPO_NAME=$(basename "$dir")
            echo "Processing repository: getwilds/$REPO_NAME"
            
            # Check for README.md
            if [ ! -f "$dir/README.md" ]; then
              echo "Warning: $dir/README.md not found, skipping full description update"
              FULL_DESC=""
            else
              FULL_DESC=$(cat "$dir/README.md")
            fi
            
            # Check for Dockerfile_latest to extract short description
            if [ ! -f "$dir/Dockerfile_latest" ]; then
              echo "Warning: $dir/Dockerfile_latest not found, skipping short description update"
              SHORT_DESC=""
            else
              # Extract the short description from the Dockerfile_latest
              SHORT_DESC=$(grep -E 'org.opencontainers.image.description=' "$dir/Dockerfile_latest" | cut -d'"' -f2)
              if [ -z "$SHORT_DESC" ]; then
                # Try single quotes if double quotes didn't work
                SHORT_DESC=$(grep -E 'org.opencontainers.image.description=' "$dir/Dockerfile_latest" | cut -d"'" -f2)
              fi
            fi
            
            echo "Updating description for repository: getwilds/$REPO_NAME"
            
            # Create JSON payload based on available content
            if [ -n "$FULL_DESC" ] && [ -n "$SHORT_DESC" ]; then
              # Both full and short descriptions are available
              jq -n --arg full "$FULL_DESC" --arg short "$SHORT_DESC" '{
                full_description: $full,
                description: $short
              }' > payload.json
            elif [ -n "$FULL_DESC" ]; then
              # Only full description is available
              jq -n --arg full "$FULL_DESC" '{
                full_description: $full
              }' > payload.json
            elif [ -n "$SHORT_DESC" ]; then
              # Only short description is available
              jq -n --arg short "$SHORT_DESC" '{
                description: $short
              }' > payload.json
            else
              # No descriptions available
              echo "No descriptions found for $REPO_NAME, skipping"
              continue
            fi
            
            # Update the DockerHub repository description
            RESPONSE=$(curl -s -H "Content-Type: application/json" \
              -H "Authorization: JWT $TOKEN" \
              -X PATCH \
              --data @payload.json \
              "https://hub.docker.com/v2/repositories/getwilds/$REPO_NAME/")
            
            if echo "$RESPONSE" | grep -q "error"; then
              echo "Error updating $REPO_NAME: $RESPONSE"
            else
              echo "Successfully updated description for getwilds/$REPO_NAME"
            fi
          done
