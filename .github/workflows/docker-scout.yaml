name: Docker Scout

on:
  workflow_dispatch:
    inputs:
      tool:
        description: 'Tool directory to analyze (leave blank to analyze all tools)'
        required: false
        type: string
  schedule:
    - cron: "0 0 1 * *"
  pull_request:
    types: [opened, reopened, synchronize]

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  scout:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to DockerHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PW }}
      - name: Install Docker Scout
        run: |
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          sh install-scout.sh
      - name: Docker Scout Scan and Update CVE Files
        run: |
          # Determine which directories to process
          if [[ -n "${{ github.event.inputs.tool }}" ]]; then
            # Check if the specified directory exists
            if [[ ! -d "${{ github.event.inputs.tool }}" ]]; then
              echo "Error: Directory '${{ github.event.inputs.tool }}' does not exist."
              exit 1
            fi
            
            echo "Processing single tool: ${{ github.event.inputs.tool }}"
            DIRS=("${{ github.event.inputs.tool }}")
          else
            echo "Processing all tool directories"
            # Get all directories except .github
            DIRS=($(find . -maxdepth 1 -type d -not -path "./.git" -not -path "./.github" -not -path "." | sed 's|^\./||'))
          fi
          
          for image_dir in "${DIRS[@]}"; do
            echo "Processing $image_dir..."
            
            # Find all Dockerfile_* files to determine tags
            for dockerfile in $image_dir/Dockerfile_*; do
              # Check if file exists (in case there are no Dockerfile_* files)
              if [[ ! -f "$dockerfile" ]]; then
                echo "No Dockerfile_* files found in $image_dir"
                continue
              fi
              
              # Extract tag from filename (everything after the underscore)
              tag=$(basename $dockerfile | cut -d'_' -f2-)
              
              # Set the full container name
              CONTAINER="getwilds/$image_dir:$tag"
              echo "Scanning $CONTAINER..."
              
              # Create CVE markdown file
              CVE_FILE="$image_dir/CVEs_$tag.md"
              
              # Generate header for the file
              echo "# Vulnerability Report for $CONTAINER" > $CVE_FILE
              echo "" >> $CVE_FILE
              echo "Report generated on $(date)" >> $CVE_FILE
              echo "" >> $CVE_FILE
              
              # Generate the main report
              echo "## Vulnerability Summary" >> $CVE_FILE
              echo "" >> $CVE_FILE
              echo '```' >> $CVE_FILE
              docker scout quickview $CONTAINER >> $CVE_FILE
              echo '```' >> $CVE_FILE
              echo "" >> $CVE_FILE
              
              # Add detailed vulnerability information
              echo "## Detailed Vulnerability Information" >> $CVE_FILE
              echo "" >> $CVE_FILE
              echo "### Fixed Vulnerabilities (Critical/High)" >> $CVE_FILE
              echo "" >> $CVE_FILE
              
              # Create a temporary file for the SARIF output
              docker scout cves $CONTAINER --only-fixed --only-severity high,critical --format sarif --output cve_check.json
              NUM_VUL=$(jq '.runs[0].tool.driver.rules | length' cve_check.json 2>/dev/null || echo "0")
              
              if [[ $NUM_VUL -ge 1 ]]; then
                echo "Found $NUM_VUL critical/high fixed vulnerabilities." >> $CVE_FILE
                echo "" >> $CVE_FILE
                docker scout cves $CONTAINER --only-fixed --only-severity high,critical --format markdown >> $CVE_FILE
              else
                echo "No critical/high fixed vulnerabilities found." >> $CVE_FILE
              fi
              
              echo "" >> $CVE_FILE
              echo "### All Vulnerabilities" >> $CVE_FILE
              echo "" >> $CVE_FILE
              docker scout cves $CONTAINER --format markdown >> $CVE_FILE
              
              echo "" >> $CVE_FILE
              echo "## Recommendations" >> $CVE_FILE
              echo "" >> $CVE_FILE
              echo '```' >> $CVE_FILE
              docker scout recommendations $CONTAINER >> $CVE_FILE
              echo '```' >> $CVE_FILE
              
              echo "Created vulnerability report at $CVE_FILE"
              
              # Clean up
              docker system prune -af
            done
          done
          
      - name: Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Check if there are changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            git add */CVEs_*.md
            git commit -m "Update vulnerability reports [skip ci]"
            git push
          else
            echo "No changes to commit"
          fi
