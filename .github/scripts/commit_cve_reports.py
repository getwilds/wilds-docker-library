#!/usr/bin/env -S uv run --script
#
# /// script
# requires-python = "==3.13"
# dependencies = ["pyyaml==6.0.3", "gitpython==3.1.45", "requests==2.32.5"]
# ///
"""
@File    :   commit_cve_reports.py
@Time    :   2025/06/20 11:34:12
@Author  :   Taylor Firman
@Version :   v0.1
@Contact :   tfirman@fredhutch.org
@Desc    :   Commit CVE reports that were successfully generated by docker_scout.py.
Reads from .cve_manifest.txt to know which files to commit.

Usage:
    python commit_cve_reports.py

    Uses .cve_manifest.txt to determine which CVE report files to commit.

Environment variables:
    GITHUB_REF_NAME: The branch or ref name
    GITHUB_EVENT_NAME: The name of the GitHub event that triggered the workflow
    GITHUB_HEAD_REF: The branch being merged from in case of PR's
    GH_APP_TOKEN: Token used to commit CVE reports to the repository.
"""

import os
import logging
import git

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("commit-cve-reports")


def commit_changes():
    """
    Commit and push CVE report files to the repository.
    """
    if not os.path.exists(".cve_manifest.txt"):
        logger.info("No CVE manifest found, nothing to commit")
        return

    with open(".cve_manifest.txt", "r") as f:
        cve_files = [line.strip() for line in f if line.strip()]

    if not cve_files:
        logger.info("No CVE files to commit")
        return

    repo = git.Repo(".")

    # Configure Git
    repo.git.config("--global", "user.name", "WILDS Docker Library Automation[bot]")
    repo.git.config(
        "--global", "user.email", "github-actions[bot]@users.noreply.github.com"
    )

    # Determine which branch to use
    event_name = os.environ.get("GITHUB_EVENT_NAME", "")
    ref_name = os.environ.get("GITHUB_REF_NAME", "main")

    if event_name == "pull_request":
        head_ref = os.environ.get("GITHUB_HEAD_REF", "")
        if head_ref:
            logger.info(f"Pull request detected, source branch: {head_ref}")
            repo.git.fetch("origin", head_ref)
            repo.git.checkout(head_ref)
            ref_name = head_ref
        else:
            logger.error("Pull request detected but GITHUB_HEAD_REF not found")
            return
    else:
        logger.info(f"Working with branch {ref_name}")

    # Stage CVE files that actually exist
    files_staged = 0
    for cve_file in cve_files:
        if os.path.exists(cve_file):
            repo.git.add(cve_file)
            files_staged += 1
            logger.info(f"Staged {cve_file}")

    # Check if there are changes to commit
    if repo.git.diff("--staged"):
        # Commit changes
        repo.git.commit("-m", "Update vulnerability reports [skip ci]")

        # Push changes
        logger.info(f"Pushing changes to {ref_name}")
        try:
            token = os.environ.get("GH_APP_TOKEN")
            repo.git.push(
                f"https://x-access-token:{token}@github.com/getwilds/wilds-docker-library.git",
                ref_name,
            )
            logger.info(f"Successfully pushed {files_staged} CVE reports")
        except git.GitCommandError as e:
            logger.error(f"Failed to push changes: {e}")
    else:
        logger.info("No changes to commit")

    # Clean up manifest
    os.remove(".cve_manifest.txt")


if __name__ == "__main__":
    commit_changes()
